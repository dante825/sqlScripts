--======================
-- ENTITY_MASTER_LKE
--=====================
-- For company merging 
--   a. update the refer_to field in entity_master
-- For moving institution into company
--   a. for the institution record in entity_master, add a refer_to (the company id)
--   b. in institution_profile, change the dbt_entity_id to the company id, type -> COMPANY, keep the original id in previous_dbt_entity_id, previous_institution_type

-- Subsequent tables need to be updated
-- address_master
-- equity_security_owner
-- wvb_dir_dealing
-- company_person_role

CREATE TABLE staging.entity_master_lke (
	id bigint generated by default as identity,
	dbt_entity_id uuid NOT NULL,
	external_id bigserial NOT NULL,
	name text NULL,
	native_name text NULL,
	display_name text NOT NULL,
	entity_type text NOT NULL,
	is_deleted bool NOT NULL,
	active bool NOT NULL,
	refer_to uuid NULL,
	wvb_handling_code int4 NULL,
	wvb_last_update_dtime timestamptz NOT NULL,
	do_not_index bool NOT NULL,
	is_sanctioned bool NOT NULL,
	created_dtime timestamptz NOT NULL,
	created_by varchar(100) NOT NULL,
	modified_dtime timestamptz NULL,
	modified_by varchar(100) NULL,
	data_source_id varchar(10) NULL,
	is_deduped bool NULL DEFAULT false,
	linked_to uuid NULL,
	updated bool default false,
	updated_dtime timestamptz
	CONSTRAINT display_name_length CHECK ((length(display_name) <= 4000)),
	CONSTRAINT entity_master_external_id_key UNIQUE (external_id),
	CONSTRAINT entity_master_pkey PRIMARY KEY (dbt_entity_id),
	CONSTRAINT entity_type_length CHECK ((length(entity_type) <= 10)),
	CONSTRAINT name_length CHECK ((length(name) <= 4000)),
	CONSTRAINT names_is_both_not_null CHECK ((COALESCE(name, native_name) IS NOT NULL)),
	CONSTRAINT native_name_length CHECK ((length(native_name) <= 4000)),
	CONSTRAINT entity_master_entity_type_fkey FOREIGN KEY (entity_type) REFERENCES dibots_v2.ref_entity_types(entity_type),
	CONSTRAINT entity_master_ref_to_fkey FOREIGN KEY (refer_to) REFERENCES dibots_v2.entity_master(dbt_entity_id)
);


