
-- to keep only the active peers record, to calculate the number of edits available
select * from dibots_user_pref.company_peer_current;

-- historical of the adding and removal of peers
select * from dibots_user_pref.company_peer_historical;

-- the preference of the median liquidity (not actually in use if not mistaken)
select * from dibots_user_pref.user_company_ir_pref

-- the link of user to a main company id
select * from dibots_user_pref.user_company_link

-- the max number of peers and the number of months between each edit
select * from dibots_user_pref.user_company_max_peer

-- the peers of each user-company link
select * from dibots_user_pref.user_company_peer

--===================
-- user_watchlist
--==================

drop table if exists dibots_user_pref.user_watchlist;
create table dibots_user_pref.user_watchlist (
id int generated BY DEFAULT as identity primary key,
user_id uuid not null,
username text not null,
user_role text not null,
company_id uuid,
company_ext_id bigint,
stock_code text not null,
created_dtime timestamptz not null,
created_by varchar(100) not null,
modified_dtime timestamptz,
modified_by varchar(100)
);

select * from dibots_user_pref.user_watchlist;

--truncate table dibots_user_pref.user_watchlist restart identity;

create unique index user_watchlist_uniq on dibots_user_pref.user_watchlist (user_id, stock_code);

--=========================
-- user_watchlist_current
--=========================
CREATE TABLE dibots_user_pref.user_watchlist_current (
id int generated by default as identity primary key,
user_id uuid not null,
company_id uuid,
stock_code text not null,
updated_date date NULL,
is_deleted bool NULL DEFAULT false
);

select * from dibots_user_pref.user_watchlist_current;

--truncate table dibots_user_pref.user_watchlist_current restart identity;

--===========================
-- user_watchlist_historical
--===========================

CREATE TABLE dibots_user_pref.user_watchlist_historical (
id int generated BY DEFAULT as identity primary key,
user_id uuid not null,
company_id uuid,
stock_code text not null,
updated_date date NULL,
status varchar(2) NULL
);

select * from dibots_user_pref.user_watchlist_historical;

--=====================
-- user_watchlist_max
--=====================

--drop table if exists dibots_user_pref.user_watchlist_max;
CREATE TABLE dibots_user_pref.user_watchlist_max (
user_id uuid not null primary key,
max_stock int4 not null DEFAULT 10,
no_of_month int4 not null DEFAULT 1
);

select * from dibots_user_pref.user_watchlist_max;

GRANT USAGE, SELECT ON SEQUENCE dibots_user_pref.user_watchlist_id_seq TO dbssec;
GRANT USAGE, SELECT ON SEQUENCE dibots_user_pref.user_watchlist_current_id_seq TO dbssec;
GRANT USAGE, SELECT ON SEQUENCE dibots_user_pref.user_watchlist_historical_id_seq TO dbssec;


--=============
-- stock_view
--=============
CREATE OR REPLACE VIEW dibots_user_pref.stock_view
AS SELECT a.stock_code,
    a.stock_identifier AS dbt_entity_id,
    a.stock_identifier_ex AS external_id,
    a.mic,
    a.short_name AS stock_name,
    a.company_name
   FROM dibots_v2.exchange_stock_profile a
  WHERE a.eff_end_date IS NULL AND a.delisted_date IS NULL;
