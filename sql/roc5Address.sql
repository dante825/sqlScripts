--======================================
-- Getting addresses from ROC5 for those persons who don't have addresses in our DB
--======================================

select * from dibots_v2.entity_identifier where identifier_type in ('MK', 'B');

select * from dibots_v2.address_master

-- persons who have MK or B but no address
select c.dbt_entity_id, c.identifier_type, c.identifier, d.* from (
select a.dbt_entity_id, a.identifier_type, a.identifier from dibots_v2.entity_identifier a, dibots_v2.person_profile b
where a.dbt_entity_id = b.dbt_entity_id and a.identifier_type in ('MK', 'B') and a.deleted = false and b.active = true) c 
left join dibots_v2.address_master d
on c.dbt_entity_id = d.dbt_entity_id 
where d.address_type is null;

select count(*) from pers_no_address

--drop table pers_no_address;
create table pers_no_address (
id int generated by default as identity primary key,
dbt_entity_id uuid,
identifier_type text,
identifier text,
deleted bool default false
);

select * from pers_no_address

insert into pers_no_address(dbt_entity_id, identifier_type, identifier)
select c.dbt_entity_id, c.identifier_type, c.identifier from (
select a.dbt_entity_id, a.identifier_type, a.identifier from dibots_v2.entity_identifier a, dibots_v2.person_profile b
where a.dbt_entity_id = b.dbt_entity_id and a.identifier_type in ('MK', 'B') and a.deleted = false and b.active = true) c 
left join dibots_v2.address_master d
on c.dbt_entity_id = d.dbt_entity_id 
where d.address_type is null;

-- remove duplication on dbt_entity_id
select min(id), dbt_entity_id, identifier_type, identifier, count(*) from pers_no_address
where deleted = false
group by dbt_entity_id, identifier_type, identifier having count(*) > 1;

update pers_no_address a
set
deleted = true
where id in (select min(id) from pers_no_address where deleted = false group by dbt_entity_id, identifier_type, identifier having count(*) > 1);

select * from pers_no_address where deleted = false and identifier like '%000'

update pers_no_address 
set deleted = true
where identifier like '%000';

-- a clean list of person who do not has address
select * from pers_no_address where deleted = false;

-- should give u no record
select * from pers_no_address a, dibots_v2.address_master b
where a.dbt_entity_id = b.dbt_entity_id and a.deleted = false

--=========================

-- getting a cleansed roc5 table

select * from wvb_clone.roc5

select * from wvb_clone.roc5 where vchcompanyno = '11667' and vchpersonid = '500617105365'

update wvb_clone.roc5
set
vchaddressofficer1 = 'BUKIT RIAHMAN, NO. 1'
where vchcompanyno = '11667' and vchpersonid = '500617105365';

select * from wvb_clone.roc5 where vchpersonid = '720518105591'

update wvb_clone.roc5
set
vchname = 'LAI WEI KEAT'
where vchpersonid = '720518105591';

select * from wvb_clone.roc5 where vchpersonid = '890221146677';

update wvb_clone.roc5
set
vchname = 'TEH JUN REN'
where vchpersonid = '890221146677';

select * from wvb_clone.roc5 where vchpersonid = 'CAWANGANJOHORBHARU'

delete from wvb_clone.roc5 where vchpersonid = 'CAWANGANJOHORBHARU';

select * from wvb_clone.roc5 where vchpersonid = 'KEDAH'

delete from wvb_clone.roc5 where vchpersonid = 'KEDAH';

select * from wvb_clone.roc5 where vchpersonid = 'JOHOR BAHRU';

delete from wvb_clone.roc5 where vchpersonid = 'JOHOR BAHRU';

select * from wvb_clone.roc5 where btrim(lower(vchaddressofficer1)) like '%null%'

--drop table tmp_roc5_cleansed;
create table tmp_roc5_cleansed (
id int generated by default as identity primary key,
vchcompanyno text,
vchidtype2 text,
vchpersonid text,
vchname text,
dtbirthdate text,
vchaddressofficer1 text,
address1 text,
vchaddressofficer2 text,
address2 text,
vchaddressofficer3 text,
address3 text,
vchpostcodeofficer text,
vchtownofficer text,
chrstateofficer text,
chrdesignationcode text,
dtofficerstart text,
dtofficerresign text,
year int,
filename text,
filepath text,
officerstart date,
feeddate date,
deleted bool default false,
matched bool default false
);

select * from tmp_roc5_cleansed;

insert into tmp_roc5_cleansed(vchcompanyno, vchidtype2, vchpersonid, vchname, dtbirthdate, vchaddressofficer1, vchaddressofficer2, vchaddressofficer3, vchpostcodeofficer, vchtownofficer, chrstateofficer,
chrdesignationcode, dtofficerstart, dtofficerresign, year, filename, filepath, officerstart, feeddate)
select btrim(vchcompanyno), 
case when btrim(lower(vchidtype2)) like 'null%' then null else btrim(vchidtype2) end, 
case when btrim(lower(vchpersonid)) like 'null%' then null else btrim(vchpersonid) end,
case when btrim(lower(vchname)) like 'null%' then null else btrim(vchname) end, 
case when btrim(lower(dtbirthdate)) like 'null%' then null else btrim(dtbirthdate) end, 
case when btrim(lower(vchaddressofficer1)) like 'null%' then null else btrim(vchaddressofficer1) end, 
case when btrim(lower(vchaddressofficer2)) like 'null%' then null else btrim(vchaddressofficer2) end, 
case when btrim(lower(vchaddressofficer3)) like 'null%' then null else btrim(vchaddressofficer3) end,
case when btrim(lower(vchpostcodeofficer)) like 'null%' then null else btrim(vchpostcodeofficer) end, 
case when btrim(lower(vchtownofficer)) like 'null%' then null else btrim(vchtownofficer) end, 
case when btrim(lower(chrstateofficer)) like 'null%' then null else btrim(chrstateofficer) end, 
case when btrim(lower(chrdesignationcode)) like 'null%' then null else btrim(chrdesignationcode) end, 
btrim(dtofficerstart), btrim(dtofficerresign), cast(year as int), btrim(filename), btrim(filepath), officestart, feeddate
from wvb_clone.roc5;

update tmp_roc5_cleansed 
set
address1 = btrim(regexp_replace(regexp_replace(btrim(lower(vchaddressofficer1)), '[^A-Za-z0-9]', ' ', 'g'), '\s+', ' ', 'g')),
address2 = btrim(regexp_replace(regexp_replace(btrim(lower(vchaddressofficer2)), '[^A-Za-z0-9]', ' ', 'g'), '\s+', ' ', 'g')),
address3 = btrim(regexp_replace(regexp_replace(btrim(lower(vchaddressofficer3)), '[^A-Za-z0-9]', ' ', 'g'), '\s+', ' ', 'g'))

select * from tmp_roc5_cleansed where address1 = 'nil'

update tmp_roc5_cleansed
set
address1 = null,
vchaddressofficer1 = null
where address1 = 'nil';

select * from tmp_roc5_cleansed where address1 = 'tiada'

update tmp_roc5_cleansed
set
address1 = null,
vchaddressofficer1 = null
where address1 = 'tiada';

select * from tmp_roc5_cleansed where address2 = 'nil'

select * from tmp_roc5_cleansed where lower(vchpostcodeofficer) = 'nil'

update tmp_roc5_cleansed
set vchpostcodeofficer = null
where lower(vchpostcodeofficer) = 'nil';

select * from tmp_roc5_cleansed where lower(vchtownofficer) = 'nil';

update tmp_roc5_cleansed
set vchtownofficer = null
where lower(vchtownofficer) = 'nil';

select * from tmp_roc5_cleansed where address1 is null

delete from tmp_roc5_cleansed where address1 is null;

--========================
-- DUPLICATES REMOVAL
--========================

-- METHOD 1: The usual way but some duplicates has over 1800 records so this way may abit hard to do

update tmp_roc5_cleansed
set
deleted = false,
matched = false;

select min(id), vchpersonid, address1, count(*) from tmp_roc5_cleansed 
where deleted = false
group by vchpersonid, address1 having count(*) > 1;

select min(id), vchpersonid, address1, count(*) from tmp_roc5_cleansed 
where deleted = false
group by vchpersonid, address1 having count(*) = 1;

-- run multiple times until the query gives no result
update tmp_roc5_cleansed
set deleted = true
where id in (select min(id) from tmp_roc5_cleansed where deleted = false group by vchpersonid, address1 having count(*) > 1);

-- METHOD 2: the reverse way, set all deleted to true then only flipped some

update tmp_roc5_cleansed
set deleted = true;

select min(id), vchpersonid, address1, count(*) from tmp_roc5_cleansed 
where deleted = true
group by vchpersonid, address1 having count(*) > 1;

select min(id), vchpersonid, address1, count(*) from tmp_roc5_cleansed 
where deleted = true
group by vchpersonid, address1 having count(*) = 1;

-- only run once
update tmp_roc5_cleansed
set deleted = false
where id in (select max(id) from tmp_roc5_cleansed where deleted = true group by vchpersonid, address1 having count(*) = 1);

-- only run once
update tmp_roc5_cleansed
set deleted = false
where id in (select max(id) from tmp_roc5_cleansed where deleted = true group by vchpersonid, address1 having count(*) > 1);

select * from tmp_roc5_cleansed where vchpersonid = '860111265344' and address1 = '450 1st floor'

--=================================================
-- CHECK ON THE NO DUPLICATE RECORDS
--=================================================

select count(*) from tmp_roc5_cleansed;

select count(*) from tmp_roc5_cleansed where deleted = TRUE;

select count(*) from tmp_roc5_cleansed where deleted = false;

update tmp_roc5_cleansed
set deleted = true
where vchpersonid is null;

select max(id), vchpersonid, address1 from tmp_roc5_cleansed where deleted = false
group by vchpersonid, address1 having count(*) > 1

-- is there any deleted records that should not be deleted?
select * from 
(select id, vchpersonid, vchname, address1 from tmp_roc5_cleansed where deleted = true) a
left join 
(select id, vchpersonid, vchname, address1 from tmp_roc5_cleansed where deleted = false) b
on a.vchpersonid = b.vchpersonid and a.address1 = b.address1
where b.id is null

vacuum (analyze) tmp_roc5_cleansed;

-- verify
-- should get 0
select min(id), vchpersonid, address1, address2, address3, count(*) from tmp_roc5_cleansed 
where deleted = false
group by vchpersonid, address1, address2, address3 having count(*) > 1;

select vchpersonid, vchidtype2, vchname, vchaddressofficer1, address1, vchaddressofficer2, address2, vchaddressofficer3, address3 from tmp_roc5_cleansed where deleted = false;

-- manual cleansing needed
-- same address but different string in different fields so cant check programmatically

select vchpersonid, count(*) from tmp_roc5_cleansed
where deleted = false
group by vchpersonid having count(*) > 1;


-- join with the pers_no_address and only clean those

select * from pers_no_address a, tmp_roc5_cleansed b
where a.identifier = b.vchpersonid and a.deleted = false --and b.deleted = false;

select b.id, count(*) from pers_no_address a, tmp_roc5_cleansed b
where a.identifier = b.vchpersonid and a.deleted = false and b.deleted = false
group by b.id having count(*) > 1

select * from tmp_roc5_cleansed where id = 7149013

select * from pers_no_address where identifier = '500923055095'

select count(*) from pers_no_address

update tmp_roc5_cleansed
set matched = false;

update tmp_roc5_cleansed
set matched = true
where id in (select b.id from pers_no_address a, tmp_roc5_cleansed b
where a.identifier = b.vchpersonid and a.deleted = false and b.deleted = false);

select count(*) from tmp_roc5_cleansed where matched = true and deleted = false;


--drop table tmp_new_address;
create table tmp_new_address (
id int,
dbt_entity_id uuid,
person_id text,
id_type text,
person_name text,
address_type text,
eff_from_date date,
address_line_1 text,
address_line_2 text,
address_line_3 text,
address_line_4 text,
postcode text,
city text,
state text,
state_code text,
country text,
original_eff_from_date timestamp,
deleted bool default false,
updated bool default false,
loaded bool default false,
db_mk text,
db_b text,
db_p text,
db_p_country text,
constraint tmp_new_addr_pkey primary key (id, dbt_entity_id)
);

select * from tmp_new_address;

insert into tmp_new_address (id, dbt_entity_id, person_id, address_type, id_type, person_name, eff_from_date, address_line_1, address_line_2, address_line_3, postcode, city, state_code, country, original_eff_from_date)
select b.id, a.dbt_entity_id, a.identifier, 'PERSADRES', b.vchidtype2, b.vchname, b.officerstart, b.vchaddressofficer1, b.vchaddressofficer2, b.vchaddressofficer3, b.vchpostcodeofficer, b.vchtownofficer,
b.chrstateofficer, null, '1900-01-01'
from pers_no_address a, tmp_roc5_cleansed b
where a.identifier = b.vchpersonid and a.deleted = false --and b.deleted = false
order by a.identifier;

-- verify the person_id
select a.dbt_entity_id, a.id_type, a.person_name, a.person_id, b.identifier from tmp_new_address a
left join dibots_v2.entity_identifier b
on a.dbt_entity_id = b.dbt_entity_id and a.person_id = b.identifier --and a.id_type = b.identifier_type
where b.identifier is null

-- with the identifier_type some may not get matches 
-- without the identifier_type all would get match, seems fine

-- some cleansing
select * from tmp_new_address where address_line_1 like E'\'%'

select regexp_replace(address_line_1, E'\'', '','g') from tmp_new_address

update tmp_new_address
set
address_line_1 = upper(regexp_replace(address_line_1, E'\'', '','g')),
address_line_2 = upper(regexp_replace(address_line_2, E'\'', '','g')),
address_line_3 = upper(regexp_replace(address_line_3, E'\'', '','g'))

-- just to balance the single quote '

select * from tmp_new_address where address_line_1 like '%#%'

update tmp_new_address
set
address_line_1 = upper(regexp_replace(address_line_1, '#', '','g')),
address_line_2 = upper(regexp_replace(address_line_2, '#', '','g')),
address_line_3 = upper(regexp_replace(address_line_3, '#', '','g'))

select * from tmp_new_address where address_line_1 like 'SELANGOR%'

delete from tmp_new_address where id in (select id from tmp_new_address where address_line_1 like 'SELANGOR%');

select * from tmp_new_address order by address_line_1

select * from tmp_new_address where lower(address_line_1) like '%singapore%' or lower(address_line_2) like '%singapore%' or lower(address_line_3) like '%singapore%'

select * from tmp_new_address where lower(address_line_1) like '%sgp%' or lower(address_line_2) like '%sgp%' or lower(address_line_3) like '%sgp%'

update tmp_new_address
set
city = 'SINGAPORE',
country = 'SGP'
WHERE lower(address_line_1) like '%singapore%' or lower(address_line_2) like '%singapore%' or lower(address_line_3) like '%singapore%'

select * from tmp_new_address where state_code is not null and state is null;

select * from tmp_new_address where state_code = 'A' and state is null

update tmp_new_address
set state = 'PERAK'
where state_code = 'A' and state is null;

select * from tmp_new_address where state_code = 'B' and state is null

update tmp_new_address
set state = 'SELANGOR'
where state_code = 'B' and state is null;

select * from tmp_new_address where state_code = 'C' and state is null

update tmp_new_address
set state = 'PAHANG'
where state_code = 'C' and state is null;

select * from tmp_new_address where state_code = 'D' and state is null

update tmp_new_address
set state = 'KELANTAN'
where state_code = 'D' and state is null;

select * from tmp_new_address where state_code = 'J' and state is null

update tmp_new_address
set state = 'JOHOR'
where state_code = 'J' and state is null;

select * from tmp_new_address where state_code = 'K' and state is null

update tmp_new_address
set state = 'KEDAH'
where state_code = 'K' and state is null;

select * from tmp_new_address where state_code IN ('L', 'U', 'W', 'WP') and state is null

update tmp_new_address
set state = 'FEDERAL TERRITORY'
where state_code IN ('L', 'U', 'W', 'WP') and state is null;

select * from tmp_new_address where state_code = 'M' and state is null

update tmp_new_address
set state = 'MELAKA'
where state_code = 'M' and state is null;

select * from tmp_new_address where state_code = 'N' and state is null

update tmp_new_address
set state = 'NEGERI SEMBILAN'
where state_code = 'N' and state is null;

select * from tmp_new_address where state_code = 'P' and state is null

update tmp_new_address
set state = 'PULAU PINANG'
where state_code = 'P' and state is null;

select * from tmp_new_address where state_code = 'R' and state is null

update tmp_new_address
set state = 'PERLIS'
where state_code = 'R' and state is null;

select * from tmp_new_address where state_code IN ('S', 'X') and state is null

update tmp_new_address
set state = 'SABAH'
where state_code IN ('S', 'X') and state is null;

select * from tmp_new_address where state_code = 'T' and state is null

update tmp_new_address
set state = 'TERENGGANU'
where state_code = 'T' and state is null;

select * from tmp_new_address where state_code = 'Y' and state is null

update tmp_new_address
set state = 'SARAWAK'
where state_code = 'Y' and state is null;

select * from tmp_new_address where length(state_code) > 1

update tmp_new_address
set
state = state_code,
state_code = null
where length(state_code) > 1

select * from tmp_new_address where eff_from_date is null

update tmp_new_address
set eff_from_date = '1900-01-01'
where eff_from_date is null;

select * from tmp_new_address where state is not null and country is null

update tmp_new_address
set
country = 'MYS'
where state is not null and country is null;

select min(id), dbt_entity_id, person_id, address_line_1, count(*) from tmp_new_address
where deleted = false
group by dbt_entity_id, person_id, address_line_1 having count(*) > 1

update tmp_new_address
set deleted = true
where id in (select min(id) from tmp_new_address
where deleted = false
group by dbt_entity_id, person_id, address_line_1 having count(*) > 1);

select count(*) from tmp_new_address where deleted = false;

-- should get all the records because none of the person in this list has address

select * from tmp_new_address a
left join dibots_v2.address_master b
on a.dbt_entity_id = b.dbt_entity_id
where a.deleted = false and b.address_type is null

select * from tmp_new_address where address_line_1 like 'NO %'

update tmp_new_address 
set address_line_1 = regexp_replace(address_line_1, 'NO ', '', 'g')
where address_line_1 like 'NO %';

select * from tmp_new_address where address_line_1 like 'NO. %'

update tmp_new_address 
set address_line_1 = regexp_replace(address_line_1, 'NO. ', '', 'g')
where address_line_1 like 'NO. %';

select * from tmp_new_address where address_line_1 like 'NO.%'

update tmp_new_address 
set address_line_1 = regexp_replace(address_line_1, 'NO.', '', 'g')
where address_line_1 like 'NO.%';

select * from tmp_new_address where address_line_1 like 'NO:%'

update tmp_new_address 
set address_line_1 = regexp_replace(address_line_1, 'NO:', '', 'g')
where address_line_1 like 'NO:%';

select * from tmp_new_address where address_line_1 like 'NO;%'

update tmp_new_address 
set address_line_1 = regexp_replace(address_line_1, 'NO;', '', 'g')
where address_line_1 like 'NO;%';

select * from tmp_new_address where address_line_1 like 'NO, %'

update tmp_new_address 
set address_line_1 = regexp_replace(address_line_1, 'NO, ', '', 'g')
where address_line_1 like 'NO, %';

select * from tmp_new_address where address_line_1 like 'NO%'

update tmp_new_address 
set address_line_1 = regexp_replace(address_line_1, 'NO', '', 'g')
where address_line_1 like 'NO%';

select * from tmp_new_address where address_line_1 like '% JLN %'

update tmp_new_address
set
address_line_1 = regexp_replace(address_line_1, ' JLN ', ' JALAN ', 'g'),
address_line_2 = regexp_replace(address_line_2, ' JLN ', ' JALAN ', 'g'),
address_line_3 = regexp_replace(address_line_3, ' JLN ', ' JALAN ', 'g')


select * from tmp_new_address where address_line_1 like '%,JLN %'

update tmp_new_address
set
address_line_1 = regexp_replace(address_line_1, ',JLN ', ', JALAN ', 'g'),
address_line_2 = regexp_replace(address_line_2, ',JLN ', ', JALAN ', 'g'),
address_line_3 = regexp_replace(address_line_3, ',JLN ', ', JALAN ', 'g')

select * from tmp_new_address where address_line_1 like '%,JLN.%'

update tmp_new_address
set
address_line_1 = regexp_replace(address_line_1, ',JLN.', ', JALAN ', 'g'),
address_line_2 = regexp_replace(address_line_2, ',JLN.', ', JALAN ', 'g'),
address_line_3 = regexp_replace(address_line_3, ',JLN.', ', JALAN ', 'g')

select * from tmp_new_address where address_line_1 like '% JLN. %'

update tmp_new_address
set
address_line_1 = regexp_replace(address_line_1, ' JLN. ', ' JALAN ', 'g'),
address_line_2 = regexp_replace(address_line_2, ' JLN. ', ' JALAN ', 'g'),
address_line_3 = regexp_replace(address_line_3, ' JLN. ', ' JALAN ', 'g')

select * from tmp_new_address where address_line_1 like '% JLN.%'

update tmp_new_address
set
address_line_1 = regexp_replace(address_line_1, ' JLN.', ' JALAN ', 'g'),
address_line_2 = regexp_replace(address_line_2, ' JLN.', ' JALAN ', 'g'),
address_line_3 = regexp_replace(address_line_3, ' JLN.', ' JALAN ', 'g')

select * from tmp_new_address where address_line_1 like '%JLN.%'

update tmp_new_address
set
address_line_1 = regexp_replace(address_line_1, 'JLN.', ' JALAN ', 'g'),
address_line_2 = regexp_replace(address_line_2, 'JLN.', ' JALAN ', 'g'),
address_line_3 = regexp_replace(address_line_3, 'JLN.', ' JALAN ', 'g')


select * from tmp_new_address where btrim(address_line_1) = '';

update tmp_new_address
set address_line_1 = null
where btrim(address_line_1) = '';

select * from tmp_new_address where btrim(address_line_2) = '';

update tmp_new_address
set address_line_2 = null
where btrim(address_line_2) = '';

select * from tmp_new_address where btrim(address_line_3) = '';

update tmp_new_address
set address_line_3 = null
where btrim(address_line_3) = '';

select * from tmp_new_address where btrim(address_line_4) = '';

update tmp_new_address
set address_line_4 = null
where btrim(address_line_4) = '';

select * from tmp_new_address where btrim(postcode) = '';

update tmp_new_address
set postcode = null
where btrim(postcode) = '';

select * from tmp_new_address where btrim(city) = '';

update tmp_new_address
set city = null
where btrim(city) = '';

select * from tmp_new_address where btrim(state) = '';

update tmp_new_address
set state = null
where btrim(state) = '';

select * from tmp_new_address where btrim(state_code) = '';

update tmp_new_address
set state_code = null
where btrim(state_code) = '';

select * from tmp_new_address where btrim(country) = '';

update tmp_new_address
set country = null
where btrim(country) = '';

update tmp_new_address
set
city = upper(city),
state = upper(state),
state_code = upper(state_code)

select person_id, count(*) from tmp_new_address
where deleted = false
group by person_id having count(*) > 1

select * from tmp_new_address where person_id in (select person_id from tmp_new_address where deleted = false group by person_id having count(*) > 1) and deleted = false
order by person_id, address_line_1

select min(id) as min_id, dbt_entity_id, person_id, id_type, address_type, min(eff_from_date) as eff_from_date, btrim(address_line_1) as address_line_1, 
btrim(address_line_2) as address_line_2, btrim(address_line_3) as address_line_3, btrim(address_line_4) as address_line_4, btrim(postcode) as postcode, btrim(city) as city,
btrim(state) as state, btrim(state_code) as state_code, btrim(country) as country, min(original_eff_from_date) as original_eff_from_date, count(*)
from tmp_new_address
where deleted = false
group by dbt_entity_id, person_id, id_type, address_type, btrim(address_line_1), btrim(address_line_2), btrim(address_line_3), btrim(address_line_4), btrim(postcode), btrim(city), btrim(state), btrim(state_code), btrim(country)

select * from tmp_new_address where deleted = false



-- remove those common words at the front of the address then compare again
select * from tmp_new_address2 where deleted = false and lower(address_line_1) like 'lot%'

update tmp_new_address2
set cleansed_line1 = regexp_replace(lower(regexp_replace(address_line_1, 'LOT', '', 'g')), '[^a-z]', '', 'g')
where deleted = false and lower(address_line_1) like 'lot%'

select * from tmp_new_address2 where deleted = false and lower(address_line_1) like 'no%'

select * from tmp_new_address2 where deleted = false and lower(address_line_1) like '%jln%'

select * from tmp_new_address2 where deleted = false and lower(address_line_1) like '%level%'

update tmp_new_address2
set cleansed_line1 = regexp_replace(lower(regexp_replace(address_line_1, 'LEVEL', '', 'g')), '[^a-z]', '', 'g')
where deleted = false and lower(address_line_1) like '%level%'

select * from tmp_new_address2 where deleted = false and lower(address_line_1) like '%unit%'

update tmp_new_address2
set cleansed_line1 = regexp_replace(lower(regexp_replace(address_line_1, 'UNIT', '', 'g')), '[^a-z]', '', 'g')
where deleted = false and lower(address_line_1) like '%unit%'

select * from tmp_new_address2 where deleted = false and lower(address_line_1) like '%burong%'

update tmp_new_address2
set cleansed_line1 = regexp_replace(lower(regexp_replace(address_line_1, 'BURONG', 'BURUNG', 'g')), '[^a-z]', '', 'g')
where deleted = false and lower(address_line_1) like '%burong%'

select * from tmp_new_address2 where deleted = false and lower(address_line_1) like '%kampong%'

update tmp_new_address2
set cleansed_line1 = regexp_replace(lower(regexp_replace(address_line_1, 'KAMPONG', 'KAMPUNG', 'g')), '[^a-z]', '', 'g')
where deleted = false and lower(address_line_1) like '%kampong%'

select * from tmp_new_address2 where deleted = false and lower(address_line_1) like '%kawasari%'

update tmp_new_address2
set cleansed_line1 = regexp_replace(lower(regexp_replace(address_line_1, 'KAWASARI', 'KASAWARI', 'g')), '[^a-z]', '', 'g')
where deleted = false and lower(address_line_1) like '%kawasari%'


select * from dibots_v2.address_master where created_dtime::date = '2022-01-13' and created_by = 'kangwei' order by dbt_entity_id

insert into dibots_v2.address_master (dbt_entity_id, address_type, eff_from_date, address_line_1, address_line_2, address_line_3, postcode, city, state, country, created_dtime, created_by, wvb_handling_code, wvb_last_update_dtime, original_eff_from_date)
select dbt_entity_id, address_type, eff_from_date, btrim(address_line_1), btrim(address_line_2), btrim(address_line_3), btrim(postcode), btrim(city), btrim(state), btrim(country), now(), 'kangwei', 2, '1900-01-01 00:00', original_eff_from_date
from tmp_new_address2
where deleted = false;

-- change the original_eff_from_date so that the duplicates can be inserted
select max(id), dbt_entity_id from tmp_new_address2 where deleted = false and original_eff_from_date = '1900-01-01 00:00'
group by dbt_entity_id having count(*) > 1

update tmp_new_address2 a
set original_eff_from_date = '1900-01-07 00:00'
where id in (select max(id) from tmp_new_address2 where deleted = false and original_eff_from_date = '1900-01-01 00:00'
group by dbt_entity_id having count(*) > 1);

-- if they have records in address_master then change the original_eff_from_date
select * from tmp_new_address2 a, dibots_v2.address_master b
where a.dbt_entity_id = b.dbt_entity_id and a.address_type = b.address_type and a.deleted = false and a.original_eff_from_date = '1900-01-01 00:00'

update tmp_new_address2 
set original_eff_from_date = '1900-01-08 00:00'
where id in (select a.id from tmp_new_address2 a, dibots_v2.address_master b
where a.dbt_entity_id = b.dbt_entity_id and a.address_type = b.address_type and a.deleted = false and a.original_eff_from_date = '1900-01-01 00:00')

select * from dibots_v2.address_master where dbt_entity_id = '6baf57f3-305a-48b7-98c9-8842bc45654a' 




select * from dibots_v2.address_master where dbt_entity_id = '7e9ddc63-ec0b-4e92-aa3f-03607a7d5ab0' and address_type = 'PERSADRES'

select * from tmp_new_address2 where dbt_entity_id = '7e9ddc63-ec0b-4e92-aa3f-03607a7d5ab0' and address_type = 'PERSADRES' and deleted = false

--=========
-- insert into address_master

SELECT * from tmp_new_address where deleted = false;

-- first go
insert into dibots_v2.address_master (dbt_entity_id, address_type, eff_from_date, address_line_1, address_line_2, address_line_3, postcode, city, state, country, created_dtime, created_by, wvb_handling_code, wvb_last_update_dtime, original_eff_from_date)
select dbt_entity_id, address_type, eff_from_date, address_line_1, address_line_2, address_line_3, postcode, city, state, country, now(), 'kangwei', 2, '1900-01-01 00:00', original_eff_from_date
from tmp_new_address where deleted = false
--on conflict do nothing

select b.id from dibots_v2.address_master a, tmp_new_address b
where a.dbt_entity_id = b.dbt_entity_id and a.address_type = b.address_type and a.address_line_1 = b.address_line_1 and b.deleted = false and b.loaded = false;

update tmp_new_address
set loaded = true
where id in (select b.id from dibots_v2.address_master a, tmp_new_address b
where a.dbt_entity_id = b.dbt_entity_id and a.address_type = b.address_type and a.address_line_1 = b.address_line_1 and b.deleted = false and b.loaded = false);


-- second go
insert into dibots_v2.address_master (dbt_entity_id, address_type, eff_from_date, address_line_1, address_line_2, address_line_3, postcode, city, state, country, created_dtime, created_by, wvb_handling_code, wvb_last_update_dtime, original_eff_from_date)
select dbt_entity_id, address_type, eff_from_date, address_line_1, address_line_2, address_line_3, postcode, city, state, country, now(), 'kangwei', 2, '1900-01-01 00:00', '1900-01-01 01:00:00'
from tmp_new_address where deleted = false and loaded = false
on conflict do nothing

select b.id from dibots_v2.address_master a, tmp_new_address b
where a.dbt_entity_id = b.dbt_entity_id and a.address_type = b.address_type and a.address_line_1 = b.address_line_1 and b.deleted = false and b.loaded = false

update tmp_new_address
set loaded = true
where id in (select b.id from dibots_v2.address_master a, tmp_new_address b
where a.dbt_entity_id = b.dbt_entity_id and a.address_type = b.address_type and a.address_line_1 = b.address_line_1 and b.deleted = false and b.loaded = false);

-- third go
insert into dibots_v2.address_master (dbt_entity_id, address_type, eff_from_date, address_line_1, address_line_2, address_line_3, postcode, city, state, country, created_dtime, created_by, wvb_handling_code, wvb_last_update_dtime, original_eff_from_date)
select dbt_entity_id, address_type, eff_from_date, address_line_1, address_line_2, address_line_3, postcode, city, state, country, now(), 'kangwei', 2, '1900-01-01 00:00', '1900-01-01 02:00:00'
from tmp_new_address where deleted = false and loaded = false

-- fourth go
insert into dibots_v2.address_master (dbt_entity_id, address_type, eff_from_date, address_line_1, address_line_2, address_line_3, postcode, city, state, country, created_dtime, created_by, wvb_handling_code, wvb_last_update_dtime, original_eff_from_date)
select dbt_entity_id, address_type, eff_from_date, address_line_1, address_line_2, address_line_3, postcode, city, state, country, now(), 'kangwei', 2, '1900-01-01 00:00', '1900-01-01 03:00:00'
from tmp_new_address where deleted = false and loaded = false


select * from tmp_new_address a
left join dibots_v2.address_master b on a.dbt_entity_id = b.dbt_entity_id and a.address_type = b.address_type and a.address_line_1 = b.address_line_1
where a.deleted = false and b.id is null

select * from tmp_new_address where deleted = false and loaded = false

-- 665
select count(*) from dibots_v2.address_master where created_by = 'kangwei' and created_dtime::date = '2022-01-28'

select * from tmp_new_address where deleted = false

select * from dibots_v2.address_master where dbt_entity_id = '36689de9-89a2-405f-b04e-948cc0450928'

select count(*) from dibots_v2.address_master where modified_by = 'kangwei' and modified_dtime::date = '2021-12-03'

update dibots_v2.address_master
set
address_line_1 = upper(address_line_1),
address_line_2 = upper(address_line_2),
address_line_3 = upper(address_line_3),
city = upper(city),
state = upper(state),
country = upper(country),
modified_by = 'kangwei',
modified_dtime = now()
where created_by = 'kangwei' and created_dtime::date = '2021-12-02';

vacuum (analyze) dibots_v2.address_master;

-- set the flag in tmp_roc5_cleansed
select * from tmp_roc5_cleansed

select count(*) from tmp_roc5_cleansed a, tmp_new_address b
where a.id = b.id

update tmp_roc5_cleansed
set
deleted = true
where id in (select id from tmp_new_address);

-- for those inserted into address_master
select count(*) from tmp_roc5_cleansed where matched = true and deleted = true


