
--===================
-- ref_index_type
--===================

--drop table if exists dibots_user_pref.ref_user_index_type;
create table dibots_user_pref.ref_user_index_type (
id int generated by default as identity primary key,
type varchar(255),
created_dtime timestamptz not null,
created_by varchar(100) not null,
modified_dtime timestamptz,
modified_by varchar(100)
);

insert into dibots_user_pref.ref_user_index_type (type, created_dtime, created_by) values ('simple average', now(), 'kangwei');

select * from dibots_user_pref.ref_user_index_type;

--================
-- user_index
--===============

--drop table if exists dibots_user_pref.user_index;
create table dibots_user_pref.user_index (
id int generated by default as identity primary key,
user_id uuid not null,
index_name varchar(100) not null,
index_desc varchar(255),
index_settings varchar(255),
created_dtime timestamptz not null,
created_by varchar(100) not null,
modified_dtime timestamptz,
modified_by varchar(100)
);
create index user_index_user_id_idx on dibots_user_pref.user_index(user_id);

-- index_settings should include
-- 1. calc_type (simple average or weighted average or other)
-- 2. start_date
-- 3. rebased

select * from dibots_user_pref.user_index;

-- INSERT the sector indices record
-- the user id is just a placeholder, since it can't be null
insert into dibots_user_pref.user_index (id, user_id, index_name, created_dtime, created_by) values (-1, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'CONSTRUCTION', now(), 'kangwei');
insert into dibots_user_pref.user_index (id, user_id, index_name, created_dtime, created_by) values (-2, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'CONSUMER PRODUCTS & SERVICES', now(), 'kangwei');
insert into dibots_user_pref.user_index (id, user_id, index_name, created_dtime, created_by) values (-3, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'ENERGY', now(), 'kangwei');
insert into dibots_user_pref.user_index (id, user_id, index_name, created_dtime, created_by) values (-4, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'FBMT100', now(), 'kangwei');
insert into dibots_user_pref.user_index (id, user_id, index_name, created_dtime, created_by) values (-5, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'FINANCIAL SERVICES', now(), 'kangwei');
insert into dibots_user_pref.user_index (id, user_id, index_name, created_dtime, created_by) values (-6, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'HEALTH CARE', now(), 'kangwei');
insert into dibots_user_pref.user_index (id, user_id, index_name, created_dtime, created_by) values (-7, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'INDUSTRIAL PRODUCTS & SERVICES', now(), 'kangwei');
insert into dibots_user_pref.user_index (id, user_id, index_name, created_dtime, created_by) values (-8, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'KLCI', now(), 'kangwei');
insert into dibots_user_pref.user_index (id, user_id, index_name, created_dtime, created_by) values (-9, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'PLANTATION', now(), 'kangwei');
insert into dibots_user_pref.user_index (id, user_id, index_name, created_dtime, created_by) values (-10, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'PROPERTY', now(), 'kangwei');
insert into dibots_user_pref.user_index (id, user_id, index_name, created_dtime, created_by) values (-11, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'REAL ESTATE INVESTMENT TRUSTS', now(), 'kangwei');
insert into dibots_user_pref.user_index (id, user_id, index_name, created_dtime, created_by) values (-12, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'TECHNOLOGY', now(), 'kangwei');
insert into dibots_user_pref.user_index (id, user_id, index_name, created_dtime, created_by) values (-13, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'TELECOMMUNICATIONS & MEDIA', now(), 'kangwei');
insert into dibots_user_pref.user_index (id, user_id, index_name, created_dtime, created_by) values (-14, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'TRANSPORTATION & LOGISTICS', now(), 'kangwei');
insert into dibots_user_pref.user_index (id, user_id, index_name, created_dtime, created_by) values (-15, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'UTILITIES', now(), 'kangwei');


--====================
-- user_index_stocks
--===================

--drop table if exists dibots_user_pref.user_index_stocks;
create table dibots_user_pref.user_index_stocks (
id int generated by default as identity primary key,
index_id int not null,
stock_code varchar(10) not null,
stock_name varchar(100) not null,
weightage numeric(10,2) default 1, 
created_dtime timestamptz not null,
created_by varchar(100) not null,
modified_dtime timestamptz,
modified_by varchar(100),
constraint user_index_id_fkey foreign key (index_id) references dibots_user_pref.user_index(id),
constraint user_index_stocks_uniq UNIQUE (index_id, stock_code)
);

select * from dibots_user_pref.user_index_stocks;

--=====================
-- user_index_value
--=====================

--drop table if exists dibots_user_pref.user_index_value;
create table dibots_user_pref.user_index_value (
id bigint generated by default as identity primary key,
index_id int,
trading_date date,
index_value numeric(25,6),
rebased_value  numeric(25,6),
advancer int,
decliner int,
ad_spread int,
ad_line int,
ad_ratio numeric(25,6),
constraint user_index_value_index_id_fkey foreign key (index_id) references dibots_user_pref.user_index(id),
constraint user_index_value_uniq unique (index_id, trading_date)
);

select * from dibots_user_pref.user_index_value;

--======================
-- user_index_backtest
--======================

--drop table if exists dibots_user_pref.user_index_backtest;
create table dibots_user_pref.user_index_backtest (
id int generated by default as identity primary key,
user_id uuid, 
backtest_name varchar(100) not null,
backtest_desc varchar(255),
backtest_settings varchar(255),
created_dtime timestamptz not null,
created_by varchar(100) not null,
modified_dtime timestamptz,
modified_by varchar(100)
);
create index user_index_backtest_user_id_idx on dibots_user_pref.user_index_backtest (user_id);

select * from dibots_user_pref.user_index_backtest;

--===============================
-- user_index_backtest_details
--==============================

--drop table if exists dibots_user_pref.user_index_backtest_details;
create table dibots_user_pref.user_index_backtest_details (
id int generated by default as identity primary key,
backtest_id int,
index_id int,
std_dev numeric(25,6),
cagr numeric(25,6),
sharpe_ratio numeric(25,6),
adv_dec_ratio numeric(25,6),
created_dtime timestamptz not null,
created_by varchar(100) not null,
modified_dtime timestamptz,
modified_by varchar(100),
constraint user_index_backtest_details_backtest_id_fkey foreign key (backtest_id) references dibots_user_pref.user_index_backtest (id),
constraint user_index_backtest_detailts_index_id_fkey foreign key (index_id) references dibots_user_pref.user_index (id),
constraint user_index_backtest_details_uniq unique (backtest_id, index_id)
);

select * from dibots_user_pref.user_index_backtest_details;

--===================
-- user_index_group
--===================

--drop table if exists dibots_user_pref.user_index_group;
create table dibots_user_pref.user_index_group (
id	int generated by default as identity primary key,
user_id uuid not null,
group_name varchar(100) not null,
group_desc varchar(255),
group_settings varchar(255),
created_dtime timestamptz not null,
created_by varchar(100) not null,
modified_dtime timestamptz,
modified_by varchar(100)
);
create index user_index_group_user_id_idx on dibots_user_pref.user_index_group (user_id);

select * from dibots_user_pref.user_index_group;

-- INSERT the sector indices record
-- the user id is just a placeholder, since it can't be null
insert into dibots_user_pref.user_index_group (id, user_id, group_name, created_dtime, created_by) values (-1, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'CONSTRUCTION', now(), 'kangwei');
insert into dibots_user_pref.user_index_group (id, user_id, group_name, created_dtime, created_by) values (-2, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'CONSUMER PRODUCTS & SERVICES', now(), 'kangwei');
insert into dibots_user_pref.user_index_group (id, user_id, group_name, created_dtime, created_by) values (-3, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'ENERGY', now(), 'kangwei');
insert into dibots_user_pref.user_index_group (id, user_id, group_name, created_dtime, created_by) values (-4, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'FBMT100', now(), 'kangwei');
insert into dibots_user_pref.user_index_group (id, user_id, group_name, created_dtime, created_by) values (-5, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'FINANCIAL SERVICES', now(), 'kangwei');
insert into dibots_user_pref.user_index_group (id, user_id, group_name, created_dtime, created_by) values (-6, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'HEALTH CARE', now(), 'kangwei');
insert into dibots_user_pref.user_index_group (id, user_id, group_name, created_dtime, created_by) values (-7, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'INDUSTRIAL PRODUCTS & SERVICES', now(), 'kangwei');
insert into dibots_user_pref.user_index_group (id, user_id, group_name, created_dtime, created_by) values (-8, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'KLCI', now(), 'kangwei');
insert into dibots_user_pref.user_index_group (id, user_id, group_name, created_dtime, created_by) values (-9, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'PLANTATION', now(), 'kangwei');
insert into dibots_user_pref.user_index_group (id, user_id, group_name, created_dtime, created_by) values (-10, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'PROPERTY', now(), 'kangwei');
insert into dibots_user_pref.user_index_group (id, user_id, group_name, created_dtime, created_by) values (-11, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'REAL ESTATE INVESTMENT TRUSTS', now(), 'kangwei');
insert into dibots_user_pref.user_index_group (id, user_id, group_name, created_dtime, created_by) values (-12, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'TECHNOLOGY', now(), 'kangwei');
insert into dibots_user_pref.user_index_group (id, user_id, group_name, created_dtime, created_by) values (-13, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'TELECOMMUNICATIONS & MEDIA', now(), 'kangwei');
insert into dibots_user_pref.user_index_group (id, user_id, group_name, created_dtime, created_by) values (-14, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'TRANSPORTATION & LOGISTICS', now(), 'kangwei');
insert into dibots_user_pref.user_index_group (id, user_id, group_name, created_dtime, created_by) values (-15, 'df18e2f6-03d1-44ba-a65a-90c7d2ed1d6b', 'UTILITIES', now(), 'kangwei');


--==========================
-- user_index_group_details
--==========================

--drop table if exists dibots_user_pref.user_index_group_details;
create table dibots_user_pref.user_index_group_details (
id int generated by default as identity primary key,
group_id int not null,
index_id int not null,
weightage numeric(10,2) default 1,
created_dtime timestamptz not null,
created_by varchar(100) not null,
modified_dtime timestamptz,
modified_by varchar(100),
constraint user_index_group_details_group_id_fkey foreign key (group_id) references dibots_user_pref.user_index_group (id),
constraint user_index_group_details_index_id_fkey foreign key (index_id) references dibots_user_pref.user_index (id),
constraint user_index_group_details_uniq unique (group_id, index_id)
);

select * from dibots_user_pref.user_index_group_details;

--=========================
-- user_index_group_value
--========================

--drop table if exists dibots_user_pref.user_index_group_value;
create table dibots_user_pref.user_index_group_value (
id bigint generated by default as identity primary key,
group_id int not null,
trading_date date,
index_value numeric(25,6),
rebased_value numeric(25,6),
constraint user_index_group_value_group_id_fkey foreign key (group_id) references dibots_user_pref.user_index_group (id),
constraint user_index_group_value_uniq unique (group_id, trading_date)
);

select * from dibots_user_pref.user_index_group_value;

--============================
-- user_index_group_backtest
--============================

--drop table if exists dibots_user_pref.user_index_group_backtest;
create table dibots_user_pref.user_index_group_backtest (
id int generated by default as identity primary key,
user_id uuid,
backtest_name varchar(100) not null,
backtest_desc varchar(255),
backtest_settings varchar(255),
created_dtime timestamptz not null,
created_by varchar(100) not null,
modified_dtime timestamptz,
modified_by varchar(100)
);
create index user_index_group_backtest_user_id_idx on dibots_user_pref.user_index_group_backtest (user_id);

select * from dibots_user_pref.user_index_group_backtest;

--===================================
-- user_index_group_backtest_details
--===================================

--drop table if exists dibots_user_pref.user_index_group_backtest_details;
create table dibots_user_pref.user_index_group_backtest_details (
id bigint generated by default as identity primary key,
backtest_id int not null,
group_id int not null,
std_dev numeric(25,6),
cagr numeric(25,6),
sharpe_ratio numeric(25,6),
created_dtime timestamptz not null,
created_by varchar(100) not null,
modified_dtime timestamptz,
modified_by varchar(100),
constraint user_index_group_backtest_details_backtest_id_fkey foreign key (backtest_id) references dibots_user_pref.user_index_group_backtest (id),
constraint user_index_group_backtest_details_group_id_fkey foreign key (group_id) references dibots_user_pref.user_index_group (id),
constraint user_index_group_backtest_details_uniq unique (backtest_id, group_id)
);

select * from dibots_user_pref.user_index_group_backtest_details;


--===================================
-- user_index_group_backtest_stocks
--===================================

--drop table if exists dibots_user_pref.user_index_group_backtest_stocks;
create table dibots_user_pref.user_index_group_backtest_stocks (
id int generated by default as identity primary key,
backtest_id int not null,
group_id int not null,
index_id int not null,
stock_code varchar(10) not null,
stock_name varchar(100) not null,
weightage numeric(10,2),
investment_amount numeric(10,2),
cost numeric(10,2),
net_investment numeric(10,2),
constraint user_index_group_backtest_stocks_backtest_id_fkey foreign key (backtest_id) references dibots_user_pref.user_index_group_backtest (id),
constraint user_index_group_backtest_stocks_group_id_fkey foreign key (group_id) references dibots_user_pref.user_index_group (id),
constraint user_index_group_backtest_stocks_index_id_fkey foreign key (index_id) references dibots_user_pref.user_index (id),
constraint user_index_group_backtest_stocks_uniq unique (backtest_id, group_id, index_id, stock_code)
);

select * from dibots_user_pref.user_index_group_backtest_stocks;

--==================================
-- user_index_group_backtest_values
--==================================

--drop table if exists dibots_user_pref.user_index_group_backtest_values;
create table dibots_user_pref.user_index_group_backtest_values (
id bigint generated by default as identity primary key,
backtest_id int not null, 
group_id int not null,
trading_date date,
index_value numeric(25,6),
rebased_value numeric(25,6),
advancer int,
decliner int,
ad_spread int,
ad_line int,
ad_ratio numeric(25,6),
constraint user_index_group_backtest_values_backtest_id_fkey foreign key (backtest_id) references dibots_user_pref.user_index_group_backtest (id),
constraint user_index_group_backtest_values_group_id_fkey foreign key (group_id) references dibots_user_pref.user_index_group (id),
constraint user_index_group_backtest_values_uniq unique (backtest_id, group_id, trading_date)
);

select * from dibots_user_pref.user_index_group_backtest_values;

--========================
-- sector_index_view
--========================

create or replace view dibots_user_pref.sector_index_view
as select case when a.sector = 'CONSTRUCTION' then -1
when a.sector = 'CONSUMER PRODUCTS & SERVICES' then -2
when a.sector = 'ENERGY' then -3
when a.sector = 'FBMT100' then -4
when a.sector = 'FINANCIAL SERVICES' then -5
when a.sector = 'HEALTH CARE' then -6
when a.sector = 'INDUSTRIAL PRODUCTS & SERVICES' then -7
when a.sector = 'KLCI' then -8
when a.sector = 'PLANTATION' then -9
when a.sector = 'PROPERTY' then -10
when a.sector = 'REAL ESTATE INVESTMENT TRUSTS' then -11
when a.sector = 'TECHNOLOGY' then -12
when a.sector = 'TELECOMMUNICATIONS & MEDIA' then -13
when a.sector = 'TRANSPORTATION & LOGISTICS' then -14
when a.sector = 'UTILITIES' then -15 
end
as index_id,
a.transaction_date as trading_date, a.sector, a.open, a.high, a.low, a.close
from dibots_v2.exchange_daily_sector_index a;

select * from dibots_user_pref.sector_index_view;

--=================
-- GRANTING RIGHTS
--=================

GRANT DELETE, INSERT, TRUNCATE, TRIGGER, UPDATE ON TABLE dibots_user_pref.user_index TO dbssec;
GRANT USAGE ON SEQUENCE dibots_user_pref.user_index_id_seq TO dbssec;
GRANT DELETE, INSERT, TRUNCATE, TRIGGER, UPDATE ON TABLE dibots_user_pref.user_index_stocks TO dbssec;
GRANT USAGE ON SEQUENCE dibots_user_pref.user_index_stocks_id_seq TO dbssec;
GRANT DELETE, INSERT, TRUNCATE, TRIGGER, UPDATE ON TABLE dibots_user_pref.user_index_value TO dbssec;
GRANT USAGE ON SEQUENCE dibots_user_pref.user_index_value_id_seq TO dbssec;
GRANT DELETE, INSERT, TRUNCATE, TRIGGER, UPDATE ON TABLE dibots_user_pref.user_index_backtest TO dbssec;
GRANT USAGE ON SEQUENCE dibots_user_pref.user_index_backtest_id_seq TO dbssec;
GRANT DELETE, INSERT, TRUNCATE, TRIGGER, UPDATE ON TABLE dibots_user_pref.user_index_backtest_details TO dbssec;
GRANT USAGE ON SEQUENCE dibots_user_pref.user_index_backtest_details_id_seq TO dbssec;
GRANT DELETE, INSERT, TRUNCATE, TRIGGER, UPDATE ON TABLE dibots_user_pref.user_index_group TO dbssec;
GRANT USAGE ON SEQUENCE dibots_user_pref.user_index_group_id_seq TO dbssec;
GRANT DELETE, INSERT, TRUNCATE, TRIGGER, UPDATE ON TABLE dibots_user_pref.user_index_group_details TO dbssec;
GRANT USAGE ON SEQUENCE dibots_user_pref.user_index_group_details_id_seq TO dbssec;
GRANT DELETE, INSERT, TRUNCATE, TRIGGER, UPDATE ON TABLE dibots_user_pref.user_index_group_value TO dbssec;
GRANT USAGE ON SEQUENCE dibots_user_pref.user_index_group_value_id_seq TO dbssec;
GRANT DELETE, INSERT, TRUNCATE, TRIGGER, UPDATE ON TABLE dibots_user_pref.user_index_group_backtest TO dbssec;
GRANT USAGE ON SEQUENCE dibots_user_pref.user_index_group_backtest_id_seq TO dbssec;
GRANT DELETE, INSERT, TRUNCATE, TRIGGER, UPDATE ON TABLE dibots_user_pref.user_index_group_backtest_stocks TO dbssec;
GRANT USAGE ON SEQUENCE dibots_user_pref.user_index_group_backtest_stocks_id_seq TO dbssec;
GRANT DELETE, INSERT, TRUNCATE, TRIGGER, UPDATE ON TABLE dibots_user_pref.user_index_backtest_details TO dbssec;
GRANT USAGE ON SEQUENCE dibots_user_pref.user_index_backtest_details_id_seq TO dbssec;
GRANT DELETE, INSERT, TRUNCATE, TRIGGER, UPDATE ON TABLE dibots_user_pref.user_index_group_backtest_details TO dbssec;
GRANT USAGE ON SEQUENCE dibots_user_pref.user_index_group_backtest_details_id_seq TO dbssec;
GRANT DELETE, INSERT, TRUNCATE, TRIGGER, UPDATE ON TABLE dibots_user_pref.user_index_group_backtest_values TO dbssec;
GRANT USAGE ON SEQUENCE dibots_user_pref.user_index_group_backtest_values_id_seq TO dbssec;

--==================
-- CAUTION!
--=================

truncate dibots_user_pref.user_index_group_backtest_values restart identity;
truncate dibots_user_pref.user_index_group_backtest_details restart identity;
truncate dibots_user_pref.user_index_group_backtest restart identity;
truncate dibots_user_pref.user_index_group_value restart identity;
truncate dibots_user_pref.user_index_group_details restart identity;
truncate dibots_user_pref.user_index_group restart identity;
truncate dibots_user_pref.user_index_backtest_details restart identity;
truncate dibots_user_pref.user_index_backtest restart identity;
truncate dibots_user_pref.user_index_value restart identity;
truncate dibots_user_pref.user_index_stocks restart identity;
truncate dibots_user_pref.user_index restart identity cascade;

truncate dibots_user_pref.user_index_group_details, dibots_user_pref.user_index_group, dibots_user_pref.user_index_group_value, dibots_user_pref.user_index_group_backtest_details restart identity;

vacuum (analyze) dibots_user_pref.user_index;
vacuum (analyze) dibots_user_pref.user_index_stocks;
vacuum (analyze) dibots_user_pref.user_index_value;
vacuum (analyze) dibots_user_pref.user_index_backtest;
vacuum (analyze) dibots_user_pref.user_index_backtest_details;
vacuum (analyze) dibots_user_pref.user_index_group_backtest_details;
vacuum (analyze) dibots_user_pref.user_index_group_backtest_values;
vacuum (analyze) dibots_user_pref.user_index_group_backtest;
vacuum (analyze) dibots_user_pref.user_index_group_value;
vacuum (analyze) dibots_user_pref.user_index_group_details;
vacuum (analyze) dibots_user_pref.user_index_group;


drop table if exists dibots_user_pref.user_index_backtest_details;
drop table if exists dibots_user_pref.user_index_backtest;
drop table if exists dibots_user_pref.user_index_value;
drop table if exists dibots_user_pref.user_index_stocks;
drop table if exists dibots_user_pref.user_index;
drop table if exists dibots_user_pref.user_index_group_backtest_values;
drop table if exists dibots_user_pref.user_index_group_backtest_details;
drop table if exists dibots_user_pref.user_index_group_backtest;
drop table if exists dibots_user_pref.user_index_group_value;
drop table if exists dibots_user_pref.user_index_group_details;
drop table if exists dibots_user_pref.user_index_group;
