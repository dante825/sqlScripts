--=========================
-- encrypted table test
--=========================

--drop table rod_tmp;
CREATE TABLE rod_tmp (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	mem_no varchar(20) NULL,
	investor_id varchar(20) NULL,
	enc_investor_id text,
	broker_code varchar(10) NULL,
	broker_branch varchar(10) NULL,
	broker_name varchar(100) NULL,
	cds_no varchar(20) NULL,
	enc_cds_no text,
	person_name varchar(200) NULL,
	enc_person_name text,
	address1 varchar(200) NULL,
	address2 varchar(200) NULL,
	town varchar(200) NULL,
	postcode varchar(10) NULL,
	state_code text NULL,
	country text NULL,
	nationality text NULL,
	race_code text NULL,
	investor_code text NULL,
	telephone varchar(100) NULL,
	stock_code varchar(20) NULL,
	serial_no int4 NULL,
	shares int8 NULL,
	status_code varchar(10) NULL,
	bo varchar(5) NULL,
	qualifier varchar(200) NULL,
	duplicate varchar(10) NULL,
	rejection varchar(10) NULL,
	old_id varchar(100) NULL,
	director bool NULL,
	residence bool NULL,
	treasury bool NULL,
	moratorium bool NULL,
	rom bool NULL,
	ashare bool NULL,
	snapshot_date date NULL,
	person_mk varchar(20) NULL,
	roc_no varchar(20) NULL,
	entity_type varchar(20) NULL,
	shareholder text NULL,
	enc_shareholder text null,
	person_dbt_id uuid NULL,
	person_ext_id int8 NULL,
	person_dbt_count int4 NULL,
	comp_dbt_id uuid NULL,
	comp_ext_id int8 NULL,
	comp_dbt_count int4 NULL,
	race_desc text NULL,
	locality varchar(20) NULL,
	group_type varchar(20) NULL,
	margin_acc bool NULL,
	rakuten_acc bool NULL,
	data_source int4 NOT NULL,
	created_dtime timestamptz NOT NULL DEFAULT now(),
	created_by varchar(100) NOT NULL,
	modified_dtime timestamptz NULL DEFAULT now(),
	modified_by varchar(100) NULL,
	bumi_controlled bool NULL DEFAULT false,
	CONSTRAINT rod_tmp_pkey PRIMARY KEY (id)
--	CONSTRAINT rod_registry_of_depository_record_data_source_fkey FOREIGN KEY (data_source) REFERENCES dibots_ext.rod_excel_storage(id)
);
CREATE INDEX rod_tmp_comp_dbt_idx ON rod_tmp USING btree (comp_dbt_id);
CREATE INDEX rod_tmp_comp_ext_idx ON rod_tmp USING btree (comp_ext_id);
CREATE INDEX rod_tmp_idx ON rod_tmp USING btree (data_source, snapshot_date);
CREATE INDEX rod_tmp_person_dbt_idx ON rod_tmp USING btree (person_dbt_id);
CREATE INDEX rod_tmp_person_ext_idx ON rod_tmp USING btree (person_ext_id);

select * from rod_tmp;

select count(*) from rod_tmp;

select pgp_sym_decrypt(enc_investor_id::bytea, 'longencryptionkey'), pgp_sym_decrypt(enc_cds_no::bytea, 'longencryptionkey'), pgp_sym_decrypt(enc_person_name::bytea, 'longencryptionkey'), 
pgp_sym_decrypt(enc_shareholder::bytea, 'longencryptionkey') from rod_tmp


select pgp_sym_encrypt(investor_id, 'longencryptionkey') as enc_investor_id, pgp_sym_encrypt(cds_no, 'longencryptionkey') as enc_cds_no, pgp_sym_encrypt(person_name, 'longencryptionkey') as enc_person_name, 
pgp_sym_encrypt(shareholder, 'longencryptionkey') as enc_shareholder from rod_tmp
--) a

select investor_id, cds_no, person_name, shareholder from rod_tmp;

update rod_tmp 
set 
enc_investor_id = pgp_sym_encrypt(investor_id, 'longencryptionkey'),
enc_cds_no = pgp_sym_encrypt(cds_no, 'longencryptionkey'),
enc_person_name = pgp_sym_encrypt(person_name, 'longencryptionkey'),
enc_shareholder = pgp_sym_encrypt(shareholder, 'longencryptionkey')

select * from rod_tmp

select enc_investor_id, enc_cds_no, enc_person_name, enc_shareholder from rod_tmp

select pgp_sym_decrypt(enc_investor_id::bytea, 'longencryptionkey'), pgp_sym_decrypt(enc_cds_no::bytea, 'longencryptionkey'), pgp_sym_decrypt(enc_person_name::bytea, 'longencryptionkey'), 
pgp_sym_decrypt(enc_shareholder::bytea, 'longencryptionkey') from rod_tmp





